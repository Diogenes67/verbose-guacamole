import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torchvision.models import mobilenet_v2
from torch.utils.data import DataLoader, random_split
from itertools import product

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Fixed hyperparameters
num_epochs = 50
validation_split = 0.1

# Hyperparameters to tune
learning_rates = [0.001, 0.0005, 0.0001]
weight_decays = [1e-4, 5e-4, 1e-3]
batch_sizes = [32, 64, 128]

# Data transforms (using augmentation as per best configuration)
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

# Load and split data
def load_data(batch_size):
    full_trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)

    train_size = int((1 - validation_split) * len(full_trainset))
    val_size = len(full_trainset) - train_size
    trainset, valset = random_split(full_trainset, [train_size, val_size])

    trainloader = DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    valloader = DataLoader(valset, batch_size=batch_size, shuffle=False, num_workers=2)

    testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
    testloader = DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return trainloader, valloader, testloader

# Create model
def create_model():
    model = mobilenet_v2(pretrained=False, num_classes=10)
    model.features[0][0] = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1, bias=False)
    return model.to(device)

# Training function
def train_model(model, trainloader, valloader, optimizer, criterion, scheduler):
    best_val_accuracy = 0
    for epoch in range(num_epochs):
        model.train()
        for inputs, labels in trainloader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

        scheduler.step()

        # Validation
        model.eval()
        correct = 0
        total = 0
        with torch.no_grad():
            for inputs, labels in valloader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)
                _, predicted = outputs.max(1)
                total += labels.size(0)
                correct += predicted.eq(labels).sum().item()

        val_accuracy = 100 * correct / total
        if val_accuracy > best_val_accuracy:
            best_val_accuracy = val_accuracy

    return best_val_accuracy

# Hyperparameter tuning function
def hyperparameter_tuning():
    best_accuracy = 0
    best_params = {}

    for lr, wd, bs in product(learning_rates, weight_decays, batch_sizes):
        print(f"\nTrying: lr={lr}, weight_decay={wd}, batch_size={bs}")

        trainloader, valloader, _ = load_data(bs)
        model = create_model()
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.Adam(model.parameters(), lr=lr, weight_decay=wd, amsgrad=True)
        scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)

        val_accuracy = train_model(model, trainloader, valloader, optimizer, criterion, scheduler)
        print(f"Validation Accuracy: {val_accuracy:.2f}%")

        if val_accuracy > best_accuracy:
            best_accuracy = val_accuracy
            best_params = {'lr': lr, 'weight_decay': wd, 'batch_size': bs}

    return best_params, best_accuracy

# Run hyperparameter tuning
best_params, best_accuracy = hyperparameter_tuning()

print("\nBest Hyperparameters:")
print(f"Learning Rate: {best_params['lr']}")
print(f"Weight Decay: {best_params['weight_decay']}")
print(f"Batch Size: {best_params['batch_size']}")
print(f"Best Validation Accuracy: {best_accuracy:.2f}%")

# Final evaluation with best parameters
print("\nFinal Evaluation with Best Parameters:")
trainloader, valloader, testloader = load_data(best_params['batch_size'])
model = create_model()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=best_params['lr'], weight_decay=best_params['weight_decay'], amsgrad=True)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)

train_model(model, trainloader, valloader, optimizer, criterion, scheduler)

# Test set evaluation
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for inputs, labels in testloader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

test_accuracy = 100 * correct / total
print(f"Final Test Accuracy: {test_accuracy:.2f}%")
