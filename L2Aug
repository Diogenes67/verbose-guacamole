# Deep L Fund: Experimenting with L2 Regularization and Augmentation on MobileNet with CIFAR-10

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torchvision.models import mobilenet_v2
from torch.utils.data import DataLoader
import time

# Check for GPU setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Running on device: {device}")

# Training parameters
num_epochs = 50
batch_size = 64
learning_rate = 0.001
weight_decay = 1e-4  # Strength of L2 regularization

# Data augmentation and normalization
transform_standard = transforms.Compose([
    transforms.ToTensor(),
])

transform_augmented = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

# CIFAR-10 data loader with optional augmentation
def load_data(transform_train, transform_test):
    # Load train and test sets with chosen transformations
    trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
    trainloader = DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)

    testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
    testloader = DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return trainloader, testloader

# Initialize MobileNetV2 model
def create_model():
    model = mobilenet_v2(pretrained=False, num_classes=10)
    model.features[0][0] = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1, bias=False)
    return model.to(device)

# Training and evaluation function
def train_model(model, trainloader, testloader, optimizer, criterion, scheduler):
    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0
        for inputs, labels in trainloader:
            inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        scheduler.step()

        # Evaluate on test set
        model.eval()
        correct, total = 0, 0
        with torch.no_grad():
            for inputs, labels in testloader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)
                _, predicted = outputs.max(1)
                total += labels.size(0)
                correct += predicted.eq(labels).sum().item()

        accuracy = 100 * correct / total
        print(f"Epoch {epoch+1}/{num_epochs}: Loss = {running_loss/len(trainloader):.4f}, Test Acc = {accuracy:.2f}%")

    return accuracy

# Experiment runner
def run_experiment(config_name, use_augmentation, use_l2_reg):
    print(f"\nStarting experiment: {config_name}")

    # Choose data transformations
    if use_augmentation:
        trainloader, testloader = load_data(transform_augmented, transform_augmented)
    else:
        trainloader, testloader = load_data(transform_standard, transform_standard)

    model = create_model()
    criterion = nn.CrossEntropyLoss()

    # Set optimizer with or without L2 regularization
    optimizer = optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay if use_l2_reg else 0, amsgrad=True)
    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=15, gamma=0.1)

    start_time = time.time()
    final_accuracy = train_model(model, trainloader, testloader, optimizer, criterion, scheduler)
    end_time = time.time()

    print(f"Final Accuracy for {config_name}: {final_accuracy:.2f}%")
    print(f"Total Training Time: {end_time - start_time:.2f} seconds")

    return final_accuracy

# Running different configurations
results = {
    'Standard': run_experiment("Standard", False, False),
    'With Augmentation': run_experiment("With Augmentation", True, False),
    'With L2 Regularization': run_experiment("With L2 Regularization", False, True),
    'With Augmentation and L2': run_experiment("With Augmentation and L2", True, True)
}

# Summary of results
print("\nSummary of Experiment Results:")
for config, accuracy in results.items():
    print(f"{config} Accuracy: {accuracy:.2f}%")

# Print best configuration
best_config = max(results, key=results.get)
print(f"\nBest Configuration: {best_config} - Accuracy: {results[best_config]:.2f}%")

