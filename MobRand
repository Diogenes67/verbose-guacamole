# Deep L Fund
# Random Hyperparameter Tuning 

# Import  libraries
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torchvision.models import mobilenet_v2
from torch.utils.data import DataLoader, random_split
import time
import random

# Check device 
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Data aug and normalisation 
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

# Load and split CIFAR-10 
def load_data(batch_size, validation_split=0.1):
    """
    Loads CIFAR-10 dataset and splits it into train, validation, and test sets.

    Parameters:
    - batch_size: Number per batch
    - validation_split: Proportion validation

    """
    full_trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
    
    # Split training data for val
    train_size = int((1 - validation_split) * len(full_trainset))
    val_size = len(full_trainset) - train_size
    trainset, valset = random_split(full_trainset, [train_size, val_size])

    trainloader = DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)
    valloader = DataLoader(valset, batch_size=batch_size, shuffle=False, num_workers=2)
    testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
    testloader = DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)

    return trainloader, valloader, testloader

# Customize MobileNetV2 
def create_model():

    model = mobilenet_v2(pretrained=False, num_classes=10)
    model.features[0][0] = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1, bias=False)
    return model.to(device)

# Training function
def train_model(model, trainloader, valloader, optimizer, criterion, scheduler, num_epochs):
    """
    Trains the model and evaluates validation accuracy after each epoch.

   
    """
    best_val_accuracy = 0
    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0
        for inputs, labels in trainloader:
            inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        scheduler.step()

        # Val
        model.eval()
        correct = 0
        total = 0
        with torch.no_grad():
            for inputs, labels in valloader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)
                _, predicted = outputs.max(1)
                total += labels.size(0)
                correct += predicted.eq(labels).sum().item()

        val_accuracy = 100 * correct / total
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(trainloader):.4f}, Val Accuracy: {val_accuracy:.2f}%')

        if val_accuracy > best_val_accuracy:
            best_val_accuracy = val_accuracy

    return best_val_accuracy

# Hyperparameter tuning
def hyperparameter_tuning(num_trials=20):
    """
    Runs multiple trials with random hyperparameters 

  
    """
    best_val_accuracy = 0
    best_params = {}

    for _ in range(num_trials):
        # Randomly sample hyperparameters
        batch_size = random.choice([32, 64, 128])
        learning_rate = random.uniform(0.0001, 0.01)
        weight_decay = random.uniform(1e-5, 1e-3)
        num_epochs = random.randint(30, 70)
        step_size = random.randint(10, 20)
        gamma = random.uniform(0.1, 0.5)

        print(f"\nTrial with parameters:")
        print(f"Batch Size: {batch_size}, Learning Rate: {learning_rate}, Weight Decay: {weight_decay}")
        print(f"Num Epochs: {num_epochs}, Step Size: {step_size}, Gamma: {gamma}")

        trainloader, valloader, _ = load_data(batch_size)
        model = create_model()
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay, amsgrad=True)
        scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=step_size, gamma=gamma)

        val_accuracy = train_model(model, trainloader, valloader, optimizer, criterion, scheduler, num_epochs)

        # Update best hyperparameters if trial better
        if val_accuracy > best_val_accuracy:
            best_val_accuracy = val_accuracy
            best_params = {
                'batch_size': batch_size,
                'learning_rate': learning_rate,
                'weight_decay': weight_decay,
                'num_epochs': num_epochs,
                'step_size': step_size,
                'gamma': gamma
            }

    return best_params, best_val_accuracy

# Run hyperparameter 
best_params, best_val_accuracy = hyperparameter_tuning()

print("\nBest Hyperparameters:")
for param, value in best_params.items():
    print(f"{param}: {value}")
print(f"Best Validation Accuracy: {best_val_accuracy:.2f}%")

# Train final model with best hyperparameters
print("\nTraining final model with best hyperparameters...")
trainloader, valloader, testloader = load_data(best_params['batch_size'])
model = create_model()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=best_params['learning_rate'], weight_decay=best_params['weight_decay'], amsgrad=True)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=best_params['step_size'], gamma=best_params['gamma'])

train_model(model, trainloader, valloader, optimizer, criterion, scheduler, best_params['num_epochs'])

# Final eval test
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for inputs, labels in testloader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

test_accuracy = 100 * correct / total
print(f"\nFinal Test Accuracy: {test_accuracy:.2f}%")
